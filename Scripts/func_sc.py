import json
import random
import re
from Scripts.add_words_yandex import *
from telebot import types
from Scripts.bd_func import *
from BaseData.models import *
from string import ascii_letters
import os


def Inline_Main_Menu(chat_id, bot, show='send', id_mess=None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞"""
    # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(*[types.InlineKeyboardButton(text='üü£üü£ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üü£üü£', callback_data='none'),
             types.InlineKeyboardButton(text='–ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ üîÄ', callback_data='learn'),
             types.InlineKeyboardButton(text='–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ üìö', callback_data='user_dict'),
             types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ üîé', callback_data='translate'),
             types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è', callback_data='info'),
             types.InlineKeyboardButton(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üö®', callback_data='notif'),
             types.InlineKeyboardButton(text='--- ', callback_data='none')])
    if show == 'send':                                      # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)
    elif show == 'replace':                                 # –ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot.edit_message_text(chat_id=chat_id,
                              message_id=id_mess,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                              reply_markup=markup)


def Inline_Learn_All_Words(id_user, bot, count, id_mess, repeat=False):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
    repeat = False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ï—Å–ª–∏ true, –∑–Ω–∞—á–∏—Ç —Å–ª–æ–≤–∞ –±–µ—Ä—É—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–æ–≥–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    # --- –í–∑—è—Ç–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ç—ã—Ä–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤–∞  ---
    if repeat:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        reader = open_file(f"action{id_user}")
        user_action = '–∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' if '_' in reader['action'] else '—Å–ª–æ–≤–∞—Ä—è'
        cb_data_delete = 'del_favorit word' if '_' in reader['action'] else 'del_dict word'
        # –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Å–ª–æ–≤
        reader = open_file(f"userword{id_user}")
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –º–∏–Ω—É—Å 1
        with open(f'ForProgramm/userword{id_user}.json', 'w', encoding='utf-8') as f:
            json.dump({'words': reader['words'], 'position': reader['position'] - 1}, f, indent=3)

        # --- –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ç–æ –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
        if reader['position'] < 0:
            bot.send_message(id_user, '–°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å')
            Inline_Main_Menu(id_user, bot, show='replace', id_mess=id_mess)

        cb_data_next = 'next word repeat'           # –î–ª—è –∫–ª–∞–≤–∏—à–∏ callback_data, –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —ç—Ç–∏—Ö –∂–µ —É—Å–ª–æ–≤–∏–π
        text = f"–û—Å—Ç–∞–ª–æ—Å—å {choose_plural(reader['position'] + 1, ('—Å–ª–æ–≤–æ', '—Å–ª–æ–≤–∞', '—Å–ª–æ–≤'))} ü§©\n" # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        words = reader['words']                                             # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤
        target_word = words[reader['position']][1]                          # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        translate = words[reader['position']][0]                            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        others = random.sample([i[1] for i in words], k=count - 1) + [words[reader['position']][1]] # —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        others_ = [f"{i}: {w}" for i, w in enumerate(others, 1)]  # –î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ª–æ–≤
        id_word = 0
        kb = [types.InlineKeyboardButton(text=f'--–£–¥–∞–ª–∏—Ç—å –∏–∑ {user_action}‚ùå--', callback_data=cb_data_delete)]

    # --- –í–∑—è—Ç–∏–µ –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è —á–µ—Ç—ã—Ä–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤–∞  ---
    else:
        words = FuncBD().random_words(count)    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—â–∏—Ö —Å–ª–æ–≤
        cb_data_next = 'next word'              # –î–ª—è –∫–ª–∞–≤–∏—à–∏ callback_data, –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —ç—Ç–∏—Ö –∂–µ —É—Å–ª–æ–≤–∏–π
        text = ''                               # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        target_word = words[0][1]               # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        translate = words[0][0]                 # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        others = [i[1] for i in words]          # 4 —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        random.shuffle(others)                  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤
        id_word = words[0][2]                   # id —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        others_ = [f"{i}: {w}" for i, w in enumerate(others, 1)]    # –î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ª–æ–≤
        kb = [types.InlineKeyboardButton(text='–≤ —Å–ª–æ–≤–∞—Ä—å üìí', callback_data='add dict'),
                 types.InlineKeyboardButton(text='–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ üß°', callback_data='add favorite')]

    # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(*[types.InlineKeyboardButton(text=word, callback_data=f'word{i}') for i, word in enumerate(others_, 1)])
    markup.row(*kb)
    markup.row(types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚ñ∂', callback_data=cb_data_next))
    markup.row(types.InlineKeyboardButton(text='‚ûñ‚ûñ‚ûñ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ûñ‚ûñ‚ûñ', callback_data='main menu'))
    bot.edit_message_text(chat_id=id_user,
                          message_id=id_mess,
                          text=f"{text}–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∫üá∏ {translate}",
                          reply_markup=markup)

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≥–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–±–µ—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
    with open(f"ForProgramm/word{id_user}.json", 'w', encoding='utf-8') as f:
        dict_word = {'target': {'eng': translate, 'ru': str(target_word), 'id': id_word}, 'all_word': others}
        json.dump(dict_word, f, indent=3)


def Inline_Add_Words(id_user, bot, id_mess):
    "–§—É–Ω–∫—Ü–∏—è –¥–ª—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"
    # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(types.InlineKeyboardButton(text='‚¨áÔ∏è–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤‚¨áÔ∏è', callback_data='none'))
    markup.add(*[types.InlineKeyboardButton(text='–°–ª–æ–≤–∞—Ä—å üìñ', callback_data='words_dict'),
                 types.InlineKeyboardButton(text='–ò–∑–±—Ä–∞–Ω–Ω—ã–µ üß°', callback_data='words_favorite')])
    markup.row(types.InlineKeyboardButton(text='‚ùáÔ∏è–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫‚ùáÔ∏è', callback_data='save_yandex'))
    markup.row(types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô', callback_data='main menu'))

    # --- –ó–∞–ø—É—Å–∫ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    bot.edit_message_text(chat_id=id_user,
                          message_id=id_mess,
                          text="–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ —Å–ª–æ–≤",
                          reply_markup=markup)


def Inline_Learn_User_Words(id_user, id_mess, bot, cb_dat):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è Inline –∫–¥–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é —Å–ª–æ–≤–∞—Ä—è / –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤'''
    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–ª–∞–≤–∏—à–∞ (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ callback_data) ---
    table = {'words_dict': 1, 'words_favorite': 0}[cb_dat]

    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (action1-3 - –¥–ª—è —Å–ª–æ–≤–∞—Ä—è, action_1-3 - –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)
    info_action = [{'action1': 'action1_', 'action2': 'action2_', 'action3': 'action3_'},
                   {'action1': 'action1', 'action2': 'action2', 'action3': 'action3'}][table]

    # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(types.InlineKeyboardButton(text=['üß°üß°üß° –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üß°üß°üß°', 'üìöüìöüìö –°–ª–æ–≤–∞—Ä—å üìöüìöüìö'][table], callback_data='none'))
    markup.row(types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ üîÉ', callback_data=info_action['action1']))
    markup.row(types.InlineKeyboardButton(text='üîΩüîΩ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤ üîΩüîΩ', callback_data='none'))
    markup.add(*[types.InlineKeyboardButton(text='–ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—Éüî§', callback_data=info_action['action2']),
                 types.InlineKeyboardButton(text='–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µüí†', callback_data=info_action['action3'])])
    markup.row(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞ üóëüî¥', callback_data=['del_f', 'del_du'][table]))
    markup.row(types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô', callback_data='user_dict'))
    markup.row(types.InlineKeyboardButton(text='‚ûñ‚ûñ‚ûñ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ûñ‚ûñ‚ûñ', callback_data='main menu'))

    # --- –ó–∞–ø—É—Å–∫ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    bot.edit_message_text(chat_id=id_user,
                          message_id=id_mess,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                          reply_markup=markup)


def user_dict_count(id_user, id_mess, bot, cb_dat):
    """–§—É–Ω–∫—Ü–∏—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–ª–∏ –≤—ã–≤–æ–¥–∞ —Å–ª–æ–≤ –∏–∑ —Å–ª–æ–≤–∞ / —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    with open(f"ForProgramm/action{id_user}.json", 'w', encoding='utf-8') as f:
        json.dump({'action': cb_dat}, f, indent=3)

    # --- –î–ª—è –≤—ã–±–æ—Ä–∞ callback_data –∫–Ω–æ–ø–∫–∏ "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    back_inline = 'words_favorite' if '_' in cb_dat else 'words_dict'

    # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(types.InlineKeyboardButton(text='‚¨áÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ ‚¨áÔ∏è', callback_data='none'))
    markup.add(*[types.InlineKeyboardButton(text='10', callback_data='repeat10'),
                 types.InlineKeyboardButton(text='20', callback_data='repeat20'),
                 types.InlineKeyboardButton(text='30', callback_data='repeat30'),
                 types.InlineKeyboardButton(text='50', callback_data='repeat50')])
    markup.row(types.InlineKeyboardButton(text='–≤—Å–µ —Å–ª–æ–≤–∞', callback_data='all'))
    markup.row(types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô', callback_data=back_inline))
    markup.row(types.InlineKeyboardButton(text='‚ûñ‚ûñ‚ûñ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ûñ‚ûñ‚ûñ', callback_data='main menu'))

    # --- –ó–∞–ø—É—Å–∫ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    bot.edit_message_text(chat_id=id_user,
                          message_id=id_mess,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)


def Inline_Save(bot, id_user, id_mess):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –Ω–∞ —è–Ω–¥–µ–∫—Å –¥–∏—Å–∫'''
    # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(types.InlineKeyboardButton(text='‚¨áÔ∏è –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ ‚¨áÔ∏è', callback_data='none'))
    markup.add(*[types.InlineKeyboardButton(text='—Å–ª–æ–≤–∞—Ä—å', callback_data='save_yandex dict'),
                 types.InlineKeyboardButton(text='–∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data='save_yandex favotire')])
    markup.row(types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô', callback_data='user_dict'))
    markup.row(types.InlineKeyboardButton(text='‚ûñ‚ûñ‚ûñ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ûñ‚ûñ‚ûñ', callback_data='main menu'))

    # --- –ó–∞–ø—É—Å–∫ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    bot.edit_message_text(chat_id=id_user,
                          message_id=id_mess,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)


def Inline_Translator_menu(bot, id_user, id_mess):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤ –≤ —á–∞—Ç–µ"""
    # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(types.InlineKeyboardButton(text='‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ ‚¨áÔ∏è', callback_data='none'))
    markup.add(*[types.InlineKeyboardButton(text='üá∑üá∫ üëâ üá∫üá∏', callback_data='ru-en'),
                 types.InlineKeyboardButton(text='üá∫üá∏ üëâ üá∑üá∫', callback_data='en-ru')])
    markup.row(types.InlineKeyboardButton(text='‚ûñ‚ûñ‚ûñ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ûñ‚ûñ‚ûñ', callback_data='main menu'))

    # --- –ó–∞–ø—É—Å–∫ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    bot.edit_message_text(chat_id=id_user,
                          message_id=id_mess,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)


def Inline_Notifications(bot, id_user, id_mess):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(types.InlineKeyboardButton(text='‚¨áÔ∏è –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å ? ‚¨áÔ∏è', callback_data='none'))
    markup.add(*[types.InlineKeyboardButton(text='00:00', callback_data='time00'),
                 types.InlineKeyboardButton(text='12:00', callback_data='time12'),
                 types.InlineKeyboardButton(text='15:00', callback_data='time15'),
                 types.InlineKeyboardButton(text='18:00', callback_data='time18'),
                 types.InlineKeyboardButton(text='20:00', callback_data='time20'),
                 types.InlineKeyboardButton(text='22:00', callback_data='time22')])
    markup.row(types.InlineKeyboardButton(text='‚ùå–≤—ã–∫–ª—é—á–∏—Ç—å‚ùå', callback_data='off_notif'))
    markup.row(types.InlineKeyboardButton(text='‚ûñ‚ûñ‚ûñ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ûñ‚ûñ‚ûñ', callback_data='main menu'))

    # --- –ó–∞–ø—É—Å–∫ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    bot.edit_message_text(chat_id=id_user,
                          message_id=id_mess,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)


def notifications(id_user, bot, cb_dat, call_id):
    """–§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    notif = {'time00': '00:00', 'time12': '12:00', 'time15': '15:00',
             'time18': '18:00', 'time20': '20:00', 'time22': '22:00',
             'off_notif': 'no'}[cb_dat]
    # –í—ã–±–æ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ / –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if notif == 'no':
        mes = f"üôÖ‚Äç‚ôÇÔ∏è–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ãüôÖ‚Äç‚ôÇÔ∏è"
    else:
        mes = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞ {choose_plural(int(notif[-5:-3]), ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'), ':00')}"
    FuncBD().update_notif(id_user, notif)       # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ë–î
    bot.answer_callback_query(call_id, mes)     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ—Ç–∞ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ / –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è


def user_words_repeat_or_print(id_user, id_mess, bot, cb_dat, cb_id, count=4):
    '''–í—ã–∑–æ–≤ –º–µ–Ω—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–ª–∏ –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤'''
    # --- –ò–∑—ä—è—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è ---
    user_action = open_file(f"action{id_user}")['action']
    count_words = {'repeat10': 10, 'repeat20': 20, 'repeat30': 30, 'repeat50': 50, 'all': 5000}[cb_dat]

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑—ä—è—Ç—ã—Ö –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
    words = FuncBD().user_words(id_user, user_action, count_words)
    # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∑–Ω–∞—á–∏—Ç –ø–æ–≤—Ç–æ—Ä –ø–æ–ª—å–∑—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤
    if '1' in user_action:
        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑—ä—è—Ç—ã—Ö –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
        random.shuffle(words)
        # –ï—Å–ª–∏ —Å–ª–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º 4, —Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞ –Ω–µ–ª—å–∑—è
        if len(words) < 4:
            bot.answer_callback_query(cb_id, f"‚úñÔ∏è‚úñÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚úñÔ∏è‚úñÔ∏è\n"
                                             f"{'-' * 14}–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Å–ª–æ–≤ –≤ —Å–ø–∏—Å–æ–∫{'-' * 14}")
            return False
        with open(f'ForProgramm/userword{id_user}.json', 'w', encoding='utf-8') as f:
            json.dump({'words': words, 'position': len(words) - 1}, f, indent=3)
        Inline_Learn_All_Words(id_user, bot, count, id_mess, repeat=True)
    else:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç, —Ç–æ —É–≤–µ–¥–æ–º–∏—Ç—å –æ–± —ç—Ç–æ–º
        if not words:
            bot.answer_callback_query(cb_id, f"‚úñÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∫ —Å–µ–±–µ –≤ —Å–ø–∏—Å–æ–∫ ‚úñÔ∏è\n")
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –µ—Å—Ç—å, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö
        else:
            if '3' in user_action:
                words = words
                message_ = '–ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ '
            else:
                words = list(sorted(words, key=lambda x: x[0]))
                message_ = '—Å–ª–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É '
            message1 = '–∏–∑ —Å–ª–æ–≤–∞—Ä—è üìì' if '_' not in user_action else '–∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üíô'
            message1 = message_ + message1
            message2 = [f"{i})üî∏eng: {w[0]}\n{' '*11}ru: {w[1]}" for i, w in enumerate(words, 1)]
            bot.send_message(id_user, f"–í–∞—à —Å–ø–∏—Å–æ–∫  {message1}\n" + '\n'.join(str(i) for i in message2))
            Inline_Main_Menu(id_user, bot, show='send')
            bot.delete_message(id_user, id_mess)


def user_words_repeat_or_print_NEXT(id_user, bot, id_mess, count=4):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤'''
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ—Å—Ç–∞–≤—à–µ–º—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–≤—Ç–æ—Ä–∞ —Å–ª–æ–≤
    reader = open_file(f"userword{id_user}")

    # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ç–æ –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if reader['position'] < 0:
        bot.send_message(id_user, '–°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å')
        bot.delete_message(id_user, id_mess)
        Inline_Main_Menu(id_user, bot, show='send', id_mess=id_mess)
    # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –æ—Å—Ç–∞–ª–∏—Å—å, —Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–∞–ª—å—à–µ
    else:
        Inline_Learn_All_Words(id_user, bot, count, id_mess, repeat=True)


def delete_user_word(id_user, bot, id_mess, cb_dat, call_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    info = {'del_f': ['favorite', 'all', '–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω—ã ‚òëÔ∏è', None],
             'del_du': ['dict', 'all', '–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É–¥–∞–ª–µ–Ω—ã ‚òëÔ∏è', None],
             'del_favorit word': ['favorite', 'one', '–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ‚òëÔ∏è', None],
             'del_dict word': ['dict', 'one', '–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è ‚òëÔ∏è', None]}[cb_dat]

    # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –æ–¥–Ω–æ, –∑–Ω–∞—á–∏—Ç —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª—è–µ–º–æ–º —Å–ª–æ–≤–µ
    if info[1] == 'one':
        reader = open_file(f'userword{id_user}')
        info[3] = reader['words'][reader['position'] + 1][0]

    # –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏–µ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –±–æ—Ç–æ–º –æ–± —ç—Ç–æ–º
    FuncBD().delete_word(id_user, info[0], info[1], info[3])
    bot.answer_callback_query(call_id, f'{info[2]}')


def add_yandex_token(bot, text, id_user):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —è–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω–∞"""
    token = re.findall(r'token:\s*([\w]{5,})\s*', text)[0]
    if check_connect_to_yandex_disk(token) == 200:
        info = FuncBD().info_user(id_user)
        if info[0][3] == token:             # –ï—Å–ª–∏ —Ç–∞–∫–æ–π —Ç–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
            bot.send_message(id_user, '–î–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è')
        elif info[0][3] is None:            # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –±—ã–ª–æ, —Ç–æ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
            bot.send_message(id_user, '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ')
            FuncBD().add_token(id_user, token)
        else:                               # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –±—ã–ª, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—ã–π
            bot.send_message(id_user, '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω üîÑ')
            FuncBD().add_token(id_user, token)
    else:                                   # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–∏—Å–∫—É –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π
        bot.send_message(id_user, '–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏. –í–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π –¢–æ–∫–µ–Ω ‚ùå')


def send_yand_disk(id_user, bot, id_mess, cb_dat, cb_id):
    """"–§—É–≥–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –¥–∏—Å–∫"""
    def message():
        bot.send_message(id_user, '‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω —è–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n'
                                   '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è:\n'
                                   'https://yandex.ru/dev/disk/rest\n\n'
                                   '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è OAuth-—Ç–æ–∫–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
                                   'token: <–∏–º—è —Ç–æ–∫–µ–Ω–∞>')
    info = FuncBD().info_user(id_user)
    # --- –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω, —Ç–æ –±–æ—Ç –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–∏—Ç ---
    if info[0][3] is None:
        message()
        bot.delete_message(id_user, id_mess)
        Inline_Main_Menu(id_user, bot, show='send', id_mess=id_mess)
    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —è–Ω–¥–µ–∫—Å –¥–∏—Å–∫ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –≤ —á–∞—Ç–µ. –ï—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Ç, –±–æ—Ç –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–∏—Ç ---
    else:
        table = {'save_yandex dict': 'dict', 'save_yandex favotire': 'favorite'}[cb_dat]
        bot.send_message(id_user, put_yandex_data(info[0][3], id_user, table))


def translate_installation(bot, id_user, cb_dat):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    # --- –í—ã–±–æ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –±–æ—Ç–∞ ----
    phrase = {'en-ru': '—Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫ üëâ üá∫üá∏', 'ru-en': '—Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π üá∑üá∫ üëâ üá∫üá∏'}[cb_dat]
    # --- –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –±–æ—Ç–∞ ---
    # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–æ –∑–Ω–∞—á–∏—Ç –æ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Å—è –≤ –ø–µ—Ä–≤—ã–µ
    if not FuncBD().info_user_language(id_user):
        bot.send_message(id_user, f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ {phrase}.\n\n'
                                  f'–¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ ‚ù§Ô∏è')
    # –ï—Å–ª–∏ —è–∑—ã–∫ —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω, —Ç–æ –≤—ã–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        bot.send_message(id_user, f'–ü–µ—Ä–µ–≤–æ–¥ {phrase[:24]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ')
    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ë–î
    FuncBD().add_language(id_user, cb_dat)


def translate_chat_word(bot, id_user, text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤ –≤ —á–∞—Ç–µ"""
    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    lang = FuncBD().info_user_language(id_user)

    # --- –ü—Ä–æ—Å—Ç–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã :) ---
    ru_letters = '–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é—ë'
    res_ru_letters = ru_letters + ru_letters.upper()

    # –ï—Å–ª–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–æ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not lang:
        bot.send_message(id_user, '------------- –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ -------------\n\n'
                                          '‚û°Ô∏è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚û°Ô∏è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ ‚û°Ô∏è —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞')
    else:
        text = text.encode('utf-8').decode('utf-8')
        if (lang[0] == 'en-ru' and set(text) < set(ascii_letters)) or (lang[0] == 'ru-en' and set(text) < set(res_ru_letters)):
            bot.send_message(id_user, translate_word(text, lang[0]))
        else:
            word = '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º' if lang[0] == 'en-ru' else '—Ä—É—Å—Å–∫–æ–º'
            bot.send_message(id_user, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ {word} –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤')


def info_user(bot, id_user, id_mess):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    inf = FuncBD().full_info_user(id_user)
    if inf[5][0][1] == 'no':
        notif_user = '–≤—ã–∫–ª—é—á–µ–Ω—ã‚úñÔ∏è'
    else:
        notif_user = f"–ø—Ä–∏—Ö–æ–¥—è—Ç —Ä–æ–≤–Ω–æ –≤ {choose_plural(int(inf[5][0][1][:2]), ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'))} 00 –º–∏–Ω—É—Ç –ø–æ –ú–°–ö"

    bot.send_message(id_user, f"‚ÑπÔ∏è‚ÑπÔ∏è –û –≤–∞—Å\n"
                              f"--–ò–º—è: {inf[0][0][1]}\n"
                              f"--TG –∏–º—è: {inf[0][0][2]}\n"
                              f"--TG id: {inf[0][0][0]}\n"
                              f"--–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {inf[2]}\n"
                              f"--–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {inf[3]}\n"
                              f"--–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤ –≤ —á–∞—Ç–µ: {inf[1][0]}\n"
                              f"--–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤: {inf[4]}\n"
                              f"--–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notif_user}")
    bot.delete_message(id_user, id_mess)
    Inline_Main_Menu(id_user, bot, show='send')


def check_word_learn(id_user, bot, cb_dat, cb_id):
    '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤—ë–ª —Å–ª–æ–≤–æ'''
    position_word = int(re.findall(r'word(\d{1,2})', cb_dat)[0]) - 1
    reader = open_file(f"word{id_user}")

    # --- –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    if reader['target']['ru'] == reader['all_word'][position_word]:
        bot.answer_callback_query(cb_id, '‚úÖ‚úÖ‚úÖ---–ø—Ä–∞–≤–∏–ª—å–Ω–æ---‚úÖ‚úÖ‚úÖ')
        FuncBD().add_result_selection(id_user, 'true')
    else:
        bot.answer_callback_query(cb_id, '‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è---–Ω–µ–≤–µ—Ä–Ω–æ---‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è')
        FuncBD().add_result_selection(id_user, 'false')


def empty_response(bot, call_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É—Å—Ç—ã—Ö Inline –∫–ª–∞–≤–∏—à'''
    bot.answer_callback_query(call_id, f'üëÄ –¢—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üëÄ')


def add_word_to_user(id_user, cb_dat, cb_id, bot):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å"""
    # --- –í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –≤ —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ---
    info = {'add dict': [UserWord, '—Å–ª–æ–≤–∞—Ä—å', '—Å–ª–æ–≤–∞—Ä–µ'],
            'add favorite': [FavoriteWordUser, '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ', '–∏–∑–±—Ä–∞–Ω–Ω–æ–º']}

    # --- –ò–∑—ä—è—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ ---
    user_word = open_file(f"word{id_user}")['target']
    # --- –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ ---
    if FuncBD().add_word_user(id_word=user_word['id'],
                           id_user=id_user,
                           ru_word=user_word['ru'],
                           eng_word=user_word['eng'],
                           tab=cb_dat):
        bot.answer_callback_query(cb_id, f"üíô —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ {info[cb_dat][1]} üíô")           # –û—Ç–≤–µ—Ç –±–æ—Ç–∞
    else:
        bot.answer_callback_query(cb_id, f"‚ùå —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ {info[cb_dat][2]} ‚ùå")        # –û—Ç–≤–µ—Ç –±–æ—Ç–∞


def choose_plural(amount, declensions, dop=''):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
    amount - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, declensions - —Å–∫–ª–æ–Ω–µ–Ω–∏—è (–∫—Ç–æ, –∫–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ)"""
    selector = {
        amount % 10 == 1: 0,
        amount % 10 in [2, 3, 4]: 1,
        amount % 10 in [0, 5, 6, 7, 8, 9]: 2,
        amount % 100 in range(11, 21) : 2
    }
    return f'{amount}{dop} {declensions[selector[True]]}'


def open_file(name, format='.json'):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤'''
    with open(f'ForProgramm/{name}{format}', encoding='utf-8') as f:
        reader = json.load(f)
    return reader


def translate_word(word, language='ru-en'):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤"""
    url = ('https://dictionary.yandex.net/api/v1/dicservice.json/lookup?key=dict.1.1.'
           '20240514T151055Z.9223e84d46b66584.cb0a6b98a598fa379099758bd12182a5b2ad03a3')
    params = {'lang': language, 'text': word}
    response = requests.get(url, params=params)
    try:
        if language == 'ru-en':
            return f"üá¨üáß en:   {response.json()['def'][0]['tr'][0]['text']}\nüá∑üá∫ ru:   {word}"
        return f"üá¨üáß en:   {word}\nüá∑üá∫ ru:   {response.json()['def'][0]['tr'][0]['text']}"
    except:
        return '–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å'